{"version":3,"sources":["actions/index.js","App.js","serviceWorker.js","reducers/counter.js","reducers/isLogged.js","reducers/index.js","index.js"],"names":["increment","num","type","payload","decrement","App","counter","useSelector","state","isLogged","dispatch","useDispatch","className","onClick","Boolean","window","location","hostname","match","counterReducer","action","loggedReducer","allReducers","combineReducers","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qNAAaA,EAAY,SAACC,GACtB,MAAO,CACHC,KAAM,YACNC,QAASF,IAGJG,EAAY,SAACH,GACtB,MAAO,CACHC,KAAM,YACNC,QAASF,IC6CFI,MAjDf,WACI,IAAMC,EAAUC,aAAY,SAAAC,GAAK,OAAIA,EAAMF,WACrCG,EAAWF,aAAY,SAAAC,GAAK,OAAIA,EAAMC,YACtCC,EAAWC,cACjB,OACI,yBAAKC,UAAU,OACX,6CAAkB,wCAClB,uCAAaN,GACb,4BACIO,QAAS,WACLH,EAASV,OAFjB,KAMA,4BACIa,QAAS,WACLH,EAASN,OAFjB,KAMA,6BACA,4BACIS,QAAS,WACLH,EAASV,EAAU,MAF3B,MAMA,4BACIa,QAAS,WACLH,EAASN,EAAU,MAF3B,MAMA,6BACA,4BACIS,QAAS,WACLH,ED3BT,CACHR,KAAM,cCwBF,kBAOQO,GACA,sECnCAK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCNSC,EAZQ,WAAwB,IAAvBX,EAAsB,uDAAd,EAAGY,EAAW,uCACpCnB,EAAOmB,EAAOjB,QAAWiB,EAAOjB,QAAU,EAChD,OAAQiB,EAAOlB,MACX,IAAK,YACD,OAAOM,EAAQP,EACnB,IAAK,YACD,OAAOO,EAAQP,EACnB,QACI,OAAOO,ICCJa,EATO,WAA4B,IAA3Bb,EAA0B,wDAAXY,EAAW,uCAC7C,OAAQA,EAAOlB,MACX,IAAK,UACD,OAAQM,EACZ,QACI,OAAOA,ICIJc,EALKC,YAAgB,CAChCjB,QAASa,EACTV,SAAUY,ICERG,EAAQC,YACVH,EACAP,OAAOW,8BAAgCX,OAAOW,gCAGlDC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,IAAD,CAAUL,MAAOA,GACb,kBAAC,EAAD,QAIRM,SAASC,eAAe,SJ+GtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.d6799089.chunk.js","sourcesContent":["export const increment = (num) => {\n    return {\n        type: 'INCREMENT',\n        payload: num //data\n    };\n};\nexport const decrement = (num) => {\n    return {\n        type: 'DECREMENT',\n        payload: num //data\n    };\n};\n\nexport const login = () => {\n    return {\n        type: 'SIGN_IN'\n    };\n};","import React from 'react';\nimport {useSelector, useDispatch} from \"react-redux\";\nimport {increment, decrement, login} from \"./actions\";\n\n\nfunction App() {\n    const counter = useSelector(state => state.counter);\n    const isLogged = useSelector(state => state.isLogged);\n    const dispatch = useDispatch();\n    return (\n        <div className=\"App\">\n            <h1>Redux example <small>V1.0</small></h1>\n            <h2>Counter {counter}</h2>\n            <button\n                onClick={() => {\n                    dispatch(increment())\n                }}\n            >+\n            </button>\n            <button\n                onClick={() => {\n                    dispatch(decrement())\n                }}\n            >-\n            </button>\n            <hr/>\n            <button\n                onClick={() => {\n                    dispatch(increment(5))\n                }}\n            >+5\n            </button>\n            <button\n                onClick={() => {\n                    dispatch(decrement(5))\n                }}\n            >-5\n            </button>\n            <hr/>\n            <button\n                onClick={() => {\n                    dispatch(login())\n                }}\n            >Loggin/loggout\n            </button>\n                {\n                    isLogged &&\n                    <h3>Valuable information I Shouldn't see</h3>\n                }\n\n        </div>\n);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const counterReducer = (state = 0, action) => {\n    const num = (action.payload) ? action.payload : 1;\n    switch (action.type) {\n        case 'INCREMENT':\n            return state + num;\n        case 'DECREMENT':\n            return state - num;\n        default:\n            return state;\n    }\n}\n\nexport default counterReducer;","const loggedReducer = (state = false, action) => {\n    switch (action.type) {\n        case 'SIGN_IN':\n            return !state;\n        default:\n            return state;\n    }\n}\n\nexport default loggedReducer;","import counterReducer from \"./counter\";\nimport loggedReducer from \"./isLogged\";\nimport {combineReducers} from \"redux\";\n\nconst allReducers = combineReducers({\n    counter: counterReducer,\n    isLogged: loggedReducer\n});\n\nexport default allReducers;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore} from \"redux\";\nimport allReducers from \"./reducers\";\nimport {Provider} from \"react-redux\";\n\nconst store = createStore(\n    allReducers,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>\n    ,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}